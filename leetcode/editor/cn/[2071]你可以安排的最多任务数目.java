//Áªô‰Ω† n ‰∏™‰ªªÂä°Âíå m ‰∏™Â∑•‰∫∫„ÄÇÊØè‰∏™‰ªªÂä°ÈúÄË¶Å‰∏ÄÂÆöÁöÑÂäõÈáèÂÄºÊâçËÉΩÂÆåÊàêÔºåÈúÄË¶ÅÁöÑÂäõÈáèÂÄº‰øùÂ≠òÂú®‰∏ãÊ†á‰ªé 0 ÂºÄÂßãÁöÑÊï¥Êï∞Êï∞ÁªÑ tasks ‰∏≠ÔºåÁ¨¨ i ‰∏™‰ªªÂä°ÈúÄË¶Å 
//tasks[i] ÁöÑÂäõÈáèÊâçËÉΩÂÆåÊàê„ÄÇÊØè‰∏™Â∑•‰∫∫ÁöÑÂäõÈáèÂÄº‰øùÂ≠òÂú®‰∏ãÊ†á‰ªé 0 ÂºÄÂßãÁöÑÊï¥Êï∞Êï∞ÁªÑ workers ‰∏≠ÔºåÁ¨¨ j ‰∏™Â∑•‰∫∫ÁöÑÂäõÈáèÂÄº‰∏∫ workers[j] „ÄÇÊØè‰∏™Â∑•‰∫∫Âè™ËÉΩÂÆå
//Êàê ‰∏Ä‰∏™ ‰ªªÂä°Ôºå‰∏îÂäõÈáèÂÄºÈúÄË¶Å Â§ß‰∫éÁ≠â‰∫é ËØ•‰ªªÂä°ÁöÑÂäõÈáèË¶ÅÊ±ÇÂÄºÔºàÂç≥ workers[j] >= tasks[i] Ôºâ„ÄÇ 
//
// Èô§Ê≠§‰ª•Â§ñÔºå‰Ω†ËøòÊúâ pills ‰∏™Á•ûÂ•áËçØ‰∏∏ÔºåÂèØ‰ª•Áªô ‰∏Ä‰∏™Â∑•‰∫∫ÁöÑÂäõÈáèÂÄº Â¢ûÂä† strength „ÄÇ‰Ω†ÂèØ‰ª•ÂÜ≥ÂÆöÁªôÂì™‰∫õÂ∑•‰∫∫‰ΩøÁî®ËçØ‰∏∏Ôºå‰ΩÜÊØè‰∏™Â∑•‰∫∫ ÊúÄÂ§ö Âè™ËÉΩ‰ΩøÁî® ‰∏Ä
//Áâá ËçØ‰∏∏„ÄÇ 
//
// Áªô‰Ω†‰∏ãÊ†á‰ªé 0 ÂºÄÂßãÁöÑÊï¥Êï∞Êï∞ÁªÑtasks Âíå workers ‰ª•Âèä‰∏§‰∏™Êï¥Êï∞ pills Âíå strength ÔºåËØ∑‰Ω†ËøîÂõû ÊúÄÂ§ö ÊúâÂ§öÂ∞ë‰∏™‰ªªÂä°ÂèØ‰ª•Ë¢´ÂÆåÊàê„ÄÇ 
//
//
// 
//
// Á§∫‰æã 1Ôºö 
//
// ËæìÂÖ•Ôºötasks = [3,2,1], workers = [0,3,3], pills = 1, strength = 1
//ËæìÂá∫Ôºö3
//Ëß£ÈáäÔºö
//Êàë‰ª¨ÂèØ‰ª•ÊåâÁÖßÂ¶Ç‰∏ãÊñπÊ°àÂÆâÊéíËçØ‰∏∏Ôºö
//- Áªô 0 Âè∑Â∑•‰∫∫ËçØ‰∏∏„ÄÇ
//- 0 Âè∑Â∑•‰∫∫ÂÆåÊàê‰ªªÂä° 2Ôºà0 + 1 >= 1Ôºâ
//- 1 Âè∑Â∑•‰∫∫ÂÆåÊàê‰ªªÂä° 1Ôºà3 >= 2Ôºâ
//- 2 Âè∑Â∑•‰∫∫ÂÆåÊàê‰ªªÂä° 0Ôºà3 >= 3Ôºâ
// 
//
// Á§∫‰æã 2Ôºö 
//
// ËæìÂÖ•Ôºötasks = [5,4], workers = [0,0,0], pills = 1, strength = 5
//ËæìÂá∫Ôºö1
//Ëß£ÈáäÔºö
//Êàë‰ª¨ÂèØ‰ª•ÊåâÁÖßÂ¶Ç‰∏ãÊñπÊ°àÂÆâÊéíËçØ‰∏∏Ôºö
//- Áªô 0 Âè∑Â∑•‰∫∫ËçØ‰∏∏„ÄÇ
//- 0 Âè∑Â∑•‰∫∫ÂÆåÊàê‰ªªÂä° 0Ôºà0 + 5 >= 5Ôºâ
// 
//
// Á§∫‰æã 3Ôºö 
//
// ËæìÂÖ•Ôºötasks = [10,15,30], workers = [0,10,10,10,10], pills = 3, strength = 10
//ËæìÂá∫Ôºö2
//Ëß£ÈáäÔºö
//Êàë‰ª¨ÂèØ‰ª•ÊåâÁÖßÂ¶Ç‰∏ãÊñπÊ°àÂÆâÊéíËçØ‰∏∏Ôºö
//- Áªô 0 Âè∑Âíå 1 Âè∑Â∑•‰∫∫ËçØ‰∏∏„ÄÇ
//- 0 Âè∑Â∑•‰∫∫ÂÆåÊàê‰ªªÂä° 0Ôºà0 + 10 >= 10Ôºâ
//- 1 Âè∑Â∑•‰∫∫ÂÆåÊàê‰ªªÂä° 1Ôºà10 + 10 >= 15Ôºâ
// 
//
// Á§∫‰æã 4Ôºö 
//
// ËæìÂÖ•Ôºötasks = [5,9,8,5,9], workers = [1,6,4,2,6], pills = 1, strength = 5
//ËæìÂá∫Ôºö3
//Ëß£ÈáäÔºö
//Êàë‰ª¨ÂèØ‰ª•ÊåâÁÖßÂ¶Ç‰∏ãÊñπÊ°àÂÆâÊéíËçØ‰∏∏Ôºö
//- Áªô 2 Âè∑Â∑•‰∫∫ËçØ‰∏∏„ÄÇ
//- 1 Âè∑Â∑•‰∫∫ÂÆåÊàê‰ªªÂä° 0Ôºà6 >= 5Ôºâ
//- 2 Âè∑Â∑•‰∫∫ÂÆåÊàê‰ªªÂä° 2Ôºà4 + 5 >= 8Ôºâ
//- 4 Âè∑Â∑•‰∫∫ÂÆåÊàê‰ªªÂä° 3Ôºà6 >= 5Ôºâ
// 
//
// 
//
// ÊèêÁ§∫Ôºö 
//
// 
// n == tasks.length 
// m == workers.length 
// 1 <= n, m <= 5 * 10‚Å¥ 
// 0 <= pills <= m 
// 0 <= tasks[i], workers[j], strength <= 10‚Åπ 
// 
//
// Related Topics Ë¥™ÂøÉ ÈòüÂàó Êï∞ÁªÑ ‰∫åÂàÜÊü•Êâæ ÊéíÂ∫è ÂçïË∞ÉÈòüÂàó üëç 111 üëé 0


//leetcode submit region begin(Prohibit modification and deletion)
import java.util.Arrays;
import java.util.HashSet;

class Solution {
//    public int maxTaskAssign(int[] tasks, int[] workers, int pills, int strength) {
//        Arrays.sort(tasks);
//        Arrays.sort(workers);
//
//        int l = 1;
//        int r = Math.min(tasks.length, workers.length);
//        int ans = 0;
//        while (l <= r) {
//            int tryCheck = (l + r) / 2;
//            if (check(tasks, workers, tryCheck, pills, strength)) {
//                ans = tryCheck;
//                l = tryCheck + 1;
//            } else {
//                r = tryCheck - 1;
//            }
//        }
//
//        return ans;
//    }
//
//    private boolean check(int[] tasks, int[] workers, int k, int pills, int strength) {
//
//        var hasDone = new HashSet<Integer>(pills);
//        int workerIdx = workers.length - 1;
//        for (int i = 0; i < k; i++) {
//            int t = tasks[k - 1 - i];
//            while (hasDone.contains(workerIdx)) {
//                workerIdx--;
//            }
//
//            int w = workers[workerIdx];
//            if (w >= t) {
//                workerIdx--;
//                continue;
//            }
//
//            if (pills == 0) {
//                return false;
//            }
//
//            int ans = workers.length - k;
//            int l = ans;
//            int r = workerIdx;
//            int target = t - strength;
//            while (l <= r) {
//                int mid = (l + r) / 2;
//                if (workers[mid] >= target) {
//                    ans = mid;
//                    r = mid - 1;
//                } else {
//                    l = mid + 1;
//                }
//            }
//
//            while (hasDone.contains(ans) && ans <= workerIdx) {
//                ans++;
//            }
//            if (ans > workerIdx) {
//                return false;
//            } else if (workers[ans] < target) {
//                return false;
//            }
//            pills--;
//            hasDone.add(ans);
//        }
//        return true;
//    }
//
//
//    public static void main(String[] args) {
//        System.out.println(new Solution().maxTaskAssign(new int[]{10, 15, 30}, new int[]{0, 10, 10, 10, 10}, 3, 10) == 2);
//    }


        public int maxTaskAssign(int[] tasks, int[] workers, int pills, int strength) {
            Arrays.sort(tasks);
            Arrays.sort(workers);

            int l = 1;
            int r = Math.min(tasks.length, workers.length);
            int ans = 0;
            while (l <= r) {
                int tryCheck = (l + r) / 2;
                if (check(tasks, workers, tryCheck, pills, strength)) {
                    ans = tryCheck;
                    l = tryCheck + 1;
                } else {
                    r = tryCheck - 1;
                }
            }

            return ans;
        }

        private boolean check(int[] tasks, int[] workers, int k, int pills, int strength) {
            ArrayList<Integer> toChooseWorker = new ArrayList<>();
            for (int i = workers.length - k; i < workers.length; i++) {
                toChooseWorker.add(workers[i]);
            }
            int cnt = 0;
            for (int i = k - 1; i >= 0; i--) {
                int t = tasks[i];

                if (t <= toChooseWorker.getLast()) {
                    toChooseWorker.removeLast();
                } else {
                    int j = lowerBound(toChooseWorker, t - strength);
                    if (j >= toChooseWorker.size()) {
                        return false;
                    }
                    cnt++;
                    if (cnt > pills) {
                        return false;
                    }
                    toChooseWorker.remove(j);
                }
            }
            return true;

        }

        public int lowerBound(List<Integer> nums, int target) {
            int l = 0;
            int r = nums.size() - 1;
            while (l <= r) {
                int mid = (l + r) / 2;
                if (nums.get(mid) < target) {
                    l = mid + 1;
                } else {
                    r = mid - 1;
                }
            }
            return l;
        }

        public static void main(String[] args) {
            System.out.println(new Solution().maxTaskAssign(new int[]{10, 15, 30}, new int[]{0, 10, 10, 10, 10}, 3, 10) == 2);
        }
}
//leetcode submit region end(Prohibit modification and deletion)
